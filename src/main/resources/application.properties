server.port=8082
# 设置服务名称 在微服务时使用
spring.application.name=shirojwtredis
#数据库配置
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.druid.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.druid.url=jdbc:mysql://localhost:3306/testmybatisplus?useUnicode=true&&characterEncoding=utf8&&useSSL=false&&serverTimezone=GMT%2B8
spring.datasource.druid.username=root
spring.datasource.druid.password=123456


################## ?连接池配置 ?################
#连接池建立时创建的初始化连接数
spring.datasource.druid.initial-size=5
#连接池中最大的活跃连接数
spring.datasource.druid.max-active=20
#连接池中最小的活跃连接数
spring.datasource.druid.min-idle=5
# 配置获取连接等待超时的时间
spring.datasource.druid.max-wait=60000
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.pool-prepared-statements=true
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
spring.datasource.druid.validation-query=SELECT 1 FROM DUAL 
spring.datasource.druid.validation-query-timeout=30000
#是否在获得连接后检测其可用性
spring.datasource.druid.test-on-borrow=false
#是否在连接放回连接池后检测其可用性
spring.datasource.druid.test-on-return=false
#是否在连接空闲一段时间后检测其可用性
spring.datasource.druid.test-while-idle=true
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.time-between-eviction-runs-millis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.min-evictable-idle-time-millis=300000
# 监控后台账号和密码
spring.datasource.druid.stat-view-servlet.login-username=admin
spring.datasource.druid.stat-view-servlet.login-password=66666666

spring.main.allow-circular-references=true

#日志配置
#logging配置
# 日志文件名称
# 路径
logging.file.name=logs/${spring.application.name}.log
# 日志级别
logging.level.com.wz.lesson=debug

# MyBatis
# MyBatis配置数据映射器位置
mybatis.mapper-locations=classpath:mapper/*.xml

# Swagger
# Swagger2在不同开发环境下的开关配置,根据不同的环境,将配置文件中的此字段改为true或者false,true为启动
swagger.enable=true

# Redis
# spring.redis.host是指远程服务器的公网ip
spring.redis.host=127.0.0.1
# 端口
spring.redis.port=6379
# 连接池最大连接数（使用负值表示没有限制） 默认 8
spring.redis.lettuce.pool.max-active=100
# 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
spring.redis.lettuce.pool.max-wait=PT10S
# 连接池中的最大空闲连接 默认 8
spring.redis.lettuce.pool.max-idle=30
# 连接池中的最小空闲连接 默认 0
spring.redis.lettuce.pool.min-idle=1
#链接超时时间
spring.redis.timeout=PT10S

# 解决 spring boot devtool 热部署后出现访问 404 问题
#DevTools的检测时间和idea的编译所需时间存在差异。在idea还没完成编译工作前，DevTools就开始进行重启和加载，导致
#@RequestMapping没有被全部正常处理。其他方法没试，就直接用了看起来最简单的方法：牺牲一点时间，去加长devtools的轮询时
#间，增大等待时间。
#解决方案如下：
#spring.devtools.restart.poll-interval=3000ms
#spring.devtools.restart.quiet-period=2999ms
#spring.devtools.restart.poll-interval=3000ms
#spring.devtools.restart.quiet-period=2999ms

# JWT配置
#JWT 密钥
jwt.secretKey=78944878877848fg)
# 以下是JWT双token刷新配置
# 使用双Token刷新的意义是：
# 避免单token情况下活跃用户需要反复登录的问题，用户登录后生成access_token 和 refresh_token两个token，access_token刷新时间短最多几小时，refresh_token刷新时间长可以达几天，access_token是用户保持登录状态使用的token，
# 而refresh_token是access_token过期后客户端根据此refresh_token来获取一个新的access_token来实现避免频繁的重复登录，当长时间有效的refresh_token过期后才需要重新登录一次，然后又可以长时间使用。
# 用户不活跃access_token不久就过期了，因为已经不再使用，用户端也不会主动通过refresh_token来获取新的access_token，这样就避免了用户退出后，恶意攻击者盗取token来盗取用户账号。
# 第一次用账号密码登录服务器会返回两个 token : access_token 和 refresh_token，时效长短不一样。短的access_token 时效过了之后，发送时效长的 refresh_token 重新获取一个短时效token，如果都过期，就需要重新登录了。
# refresh_token 就是用来刷新access_token 。活跃用户的 access_token 过期了，用refresh_token 获取新的access_token 。
# 由此可见refresh_token的过期时间就是用户保持登录的最长时间
# 业务短时间刷新Token过期时间 2小时
jwt.accessTokenExpireTime=PT2H
# PC端长时间刷新Token自动刷新时间 8小时
jwt.refreshTokenExpireTime=PT8H
# APP端长时间刷新Token自动刷新时间 30天
jwt.refreshTokenExpireAppTime=P30D
# 发行人
jwt.issuer=zhang.org.cn








